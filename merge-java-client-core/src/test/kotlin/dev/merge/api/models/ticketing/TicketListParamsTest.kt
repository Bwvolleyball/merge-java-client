package dev.merge.api.models.ticketing

import dev.merge.api.models.*
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class TicketListParamsTest {

    @Test
    fun createTicketListParams() {
        TicketListParams.builder()
            .accountId("string")
            .assigneeIds("string")
            .collectionIds("string")
            .completedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .completedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .contactId("string")
            .createdAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .createdBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .cursor("string")
            .dueAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .dueBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .expand(listOf(TicketListParams.Expand.ACCOUNT))
            .includeDeletedData(true)
            .includeRemoteData(true)
            .includeRemoteFields(true)
            .modifiedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .modifiedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .pageSize(123L)
            .parentTicketId("string")
            .priority(TicketListParams.Priority.HIGH)
            .projectId("string")
            .remoteCreatedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .remoteCreatedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .remoteFields(TicketListParams.RemoteFields.PRIORITY)
            .remoteId("string")
            .remoteUpdatedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .remoteUpdatedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .showEnumOrigins(TicketListParams.ShowEnumOrigins.PRIORITY)
            .status(TicketListParams.Status.CLOSED)
            .tags("string")
            .ticketType("string")
            .build()
    }

    @Test
    fun getQueryParams() {
        val params =
            TicketListParams.builder()
                .accountId("string")
                .assigneeIds("string")
                .collectionIds("string")
                .completedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .completedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .contactId("string")
                .createdAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .createdBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .cursor("string")
                .dueAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .dueBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .expand(listOf(TicketListParams.Expand.ACCOUNT))
                .includeDeletedData(true)
                .includeRemoteData(true)
                .includeRemoteFields(true)
                .modifiedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .modifiedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .pageSize(123L)
                .parentTicketId("string")
                .priority(TicketListParams.Priority.HIGH)
                .projectId("string")
                .remoteCreatedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .remoteCreatedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .remoteFields(TicketListParams.RemoteFields.PRIORITY)
                .remoteId("string")
                .remoteUpdatedAfter(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .remoteUpdatedBefore(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .showEnumOrigins(TicketListParams.ShowEnumOrigins.PRIORITY)
                .status(TicketListParams.Status.CLOSED)
                .tags("string")
                .ticketType("string")
                .build()
        val expected = mutableMapOf<String, List<String>>()
        expected.put("account_id", listOf("string"))
        expected.put("assignee_ids", listOf("string"))
        expected.put("collection_ids", listOf("string"))
        expected.put("completed_after", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("completed_before", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("contact_id", listOf("string"))
        expected.put("created_after", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("created_before", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("cursor", listOf("string"))
        expected.put("due_after", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("due_before", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("expand", listOf(TicketListParams.Expand.ACCOUNT.toString()))
        expected.put("include_deleted_data", listOf("true"))
        expected.put("include_remote_data", listOf("true"))
        expected.put("include_remote_fields", listOf("true"))
        expected.put("modified_after", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("modified_before", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("page_size", listOf("123"))
        expected.put("parent_ticket_id", listOf("string"))
        expected.put("priority", listOf(TicketListParams.Priority.HIGH.toString()))
        expected.put("project_id", listOf("string"))
        expected.put("remote_created_after", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("remote_created_before", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("remote_fields", listOf(TicketListParams.RemoteFields.PRIORITY.toString()))
        expected.put("remote_id", listOf("string"))
        expected.put("remote_updated_after", listOf("2019-12-27T18:11:19.117Z"))
        expected.put("remote_updated_before", listOf("2019-12-27T18:11:19.117Z"))
        expected.put(
            "show_enum_origins",
            listOf(TicketListParams.ShowEnumOrigins.PRIORITY.toString())
        )
        expected.put("status", listOf(TicketListParams.Status.CLOSED.toString()))
        expected.put("tags", listOf("string"))
        expected.put("ticket_type", listOf("string"))
        assertThat(params.getQueryParams()).isEqualTo(expected)
    }

    @Test
    fun getQueryParamsWithoutOptionalFields() {
        val params = TicketListParams.builder().build()
        val expected = mutableMapOf<String, List<String>>()
        assertThat(params.getQueryParams()).isEqualTo(expected)
    }
}
